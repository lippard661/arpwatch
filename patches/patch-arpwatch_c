- Do not bail if the interface does not have an IP assigned.
- time_t format string fixes
- add -u flag, to drop privileges to that user
- pledge and unveil

Index: arpwatch.c
--- arpwatch.c.orig	Tue May 28 15:23:09 2024
+++ arpwatch.c	Tue May 28 16:52:01 2024
@@ -72,6 +72,9 @@
 #include <syslog.h>
 #include <unistd.h>
 
+#include <pwd.h>
+#include <grp.h>
+
 #include <pcap.h>
 
 #include "gnuc.h"
@@ -172,6 +175,24 @@
 int	toskip(u_int32_t);
 void	usage(void) __attribute__((noreturn));
 
+void dropprivileges(const char* user)
+{
+	struct passwd* pw;
+	pw = getpwnam( user );
+	if ( pw ) { 
+		if ( initgroups(pw->pw_name, pw->pw_gid) != 0 || setgid(pw->pw_gid) != 0 ||
+			setuid(pw->pw_uid) != 0 ) {
+			syslog(LOG_ERR, "Couldn't change to '%.32s' uid=%d gid=%d", user,pw->pw_uid, pw->pw_gid);
+			exit(1);
+		}   
+	}
+	else {
+		syslog(LOG_ERR, "Couldn't find user '%.32s' in /etc/passwd", user);
+		exit(1);
+	}
+	syslog(LOG_INFO, "Running as uid=%d gid=%d", getuid(), getgid());
+}
+
 int
 main(int argc, char **argv)
 {
@@ -183,6 +204,7 @@
 	char *interface, *rfilename;
 	struct bpf_program code;
 	char errbuf[PCAP_ERRBUF_SIZE];
+	char* username = NULL;
 
 	if (argv[0] == NULL)
 		prog = "arpwatch";
@@ -200,7 +222,7 @@
 	interface = NULL;
 	rfilename = NULL;
 	pd = NULL;
-	while ((op = getopt(argc, argv, "CdD:Ff:i:n:NpP:qr:svw:W:x:zZ")) != EOF)
+	while ((op = getopt(argc, argv, "CdD:Ff:i:n:NpP:qr:u:svw:W:x:zZ")) != EOF)
 		switch (op) {
 
 		case 'C':
@@ -285,6 +307,19 @@
 			zeropad = 1;
 			break;
 
+		case 'u':
+			if ( optarg ) {
+				username = strdup(optarg);
+				if (username == NULL) {
+					fprintf(stderr, "strdup -u username failed");
+					exit(1);
+				}
+			} else {
+				fprintf(stderr, "%s: Need username after -u\n", prog);
+				usage();
+			}
+			break;
+
 		default:
 			usage();
 		}
@@ -381,13 +416,35 @@
 		}
 	}
 
+	if ( username ) {
+		dropprivileges( username );
+	} else {
 	/*
 	 * Revert to non-privileged user after opening sockets
 	 * (not needed on most systems).
 	 */
-	setgid(getgid());
-	setuid(getuid());
+		setgid(getgid());
+		setuid(getuid());
+	}
 
+       /* pledge not used because need pcap_filter BIOCSETF */
+       /* if (pledge ("stdio rpath cpath inet dns proc exec tty unveil error", NULL) == -1)
+	  lg(LOG_ERR, "pledge: %s", strerror(errno)); */
+       /* unveil */
+       /* r for /, rx for sendmail, rwc for /tmp, /dev/null and arpdir */
+        if (unveil ("/", "r") == -1)
+               lg(LOG_ERR, "unveil /");
+        if (unveil ("/tmp", "rwc") == -1)
+               lg(LOG_ERR, "unveil /tmp");
+        if (unveil ("/dev/null", "rwc") == -1)
+               lg(LOG_ERR, "unveil /dev/null");
+        if (unveil ("/usr/sbin/sendmail", "rx") == -1)
+               lg(LOG_ERR, "unveil /usr/sbin/sendmail");
+        if (unveil (arpdir, "rwc") == -1)
+               lg(LOG_ERR, "unveil %s", arpdir);
+        if (unveil(NULL, NULL) == -1)
+               lg(LOG_ERR, "unveil");
+
 	/* Must be ethernet or fddi */
 	linktype = pcap_datalink(pd);
 	if (linktype != DLT_EN10MB && linktype != DLT_FDDI) {
@@ -513,8 +570,8 @@
 	t = h->ts.tv_sec;
 	can_checkpoint = 0;
 	if (!ent_add(sia, sea, t, NULL))
-		lg(LOG_ERR, "ent_add(%s, %s, %ld) failed",
-		    intoa(sia), e2str(sea), (u_long)t);
+		lg(LOG_ERR, "ent_add(%s, %s, %lld) failed",
+		    intoa(sia), e2str(sea), t);
 	can_checkpoint = 1;
 
 	if (docheckpoint) {
@@ -673,8 +730,8 @@
 	t = h->ts.tv_sec;
 	can_checkpoint = 0;
 	if (!ent_add(sia, sea, t, NULL))
-		lg(LOG_ERR, "ent_add(%s, %s, %ld) failed",
-		    intoa(sia), e2str(sea), (u_long)t);
+		lg(LOG_ERR, "ent_add(%s, %s, %lld) failed",
+		    intoa(sia), e2str(sea), t);
 	can_checkpoint = 1;
 
 	if (docheckpoint) {
@@ -944,6 +1001,6 @@
 	    "usage: %s [-CdFNpqsvzZ] [-D arpdir] [-f datafile]"
 	    " [-i interface]\n\t"
 	    " [-P pidfile] [-w watcher@email] [-W watchee@email]\n\t"
-	    " [-n net[/width]] [-x net[/width]] [-r file]\n", prog);
+	    " [-n net[/width]] [-x net[/width]] [-r file] [-u username]\n", prog);
 	exit(1);
 }
